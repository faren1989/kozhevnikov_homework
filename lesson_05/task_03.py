# Задание 3. Генератор объединения двух списков
# Есть два списка:
#
# ```
# tutors = [
#         'Иван', 'Анастасия', 'Петр', 'Сергей',
#         'Дмитрий', 'Борис', 'Елена'
# ]
# klasses = [
#         '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
# ]
# ```
# Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>), например:
#
# ('Иван', '9А')
# ('Анастасия', '7В')
# ...
#
# Количество генерируемых кортежей должно быть равно длине списка tutors. Если в списке klasses меньше элементов,
# чем в списке tutors, необходимо вывести последние кортежи в виде: (<tutor>, None), например:
# ```('Станислав', None)```
# Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения. Подумать, в каких ситуациях
# генератор даст эффект.

tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена', 'Евгений', 'Аркадий']
klass = ['9А', '7В', '9Б', '9В', '8Б', '10А']


# result = ((tutors[i], klass[i]) for i in range(0, len(tutors)))


def zap(tutors, klass):
    for i in range(0, len(tutors)):
        if i >= len(klass):
            student = (tutors[i], None)
        else:
            student = (tutors[i], klass[i])
        yield student


result = zap(tutors, klass)
try:
    print(next(result))
    print(next(result))
    print(next(result))
    print(next(result))
    print(next(result))
    print(next(result))
    print(next(result))
    print(next(result))
    print(next(result))
    print(next(result))
except:
    print('Генератор истощен')

# Докажем, что создали именно генератор:
print(type(result))

# В каких ситуациях генератор даст эффект?
# Генератор мог бы дать эффект в случае, если бы использовался по типу распределяющей шляпы. Когда очередному ученику
# надели бы его на голову, он такой: "сорян, мест в классах больше нет, ты теперь None". Но для распределения учеников
# в реальной школе, я бы скорее создал несколько пустых списков, вроде 1А = [], и написал функцию, заполняющую этот
# список учениками, а когда длина списка доходила бы до максимального числа учеников в классе, начинал бы заполнять
# список 1Б = [] и т.д. Конечно, распределение должно быть чуть сложнее, нужно учитывать успеваемость и прочее, но к
# вопросу это не относится.
